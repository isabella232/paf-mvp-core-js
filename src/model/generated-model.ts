/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A domain name
 */
export type Domain = string;
/**
 * No parameter expected to call this endpoint
 */
export type Get3PcRequest = null;
/**
 * No parameter expected to call this endpoint
 */
export type GetIdentityRequest = null;
/**
 * A version number. To be detailed.
 */
export type Version = 0;
/**
 * Timestamp when the contracting party started using this key for signing
 */
export type Timestamp = number;
/**
 * Timestamp when the contracting party stopped using this key for signing
 */
export type Timestamp1 = number;
/**
 * Number of seconds since UNIX Epoch time (1970/01/01 00:00:00)
 */
export type Timestamp2 = number;
/**
 * The base64 representation of a data signature
 */
export type Signature = string;
/**
 * List of identifiers
 */
export type Identifiers = Identifier1[];
/**
 * POST /v1/ids-prefs response
 */
export type PostIdsPrefsResponse = GetIdsPrefsResponse & {
  body: IdsAndPreferences;
};
/**
 * The URL that the user should be be redirected to, to provide response data
 */
export type ReturnUrl = string;
/**
 * The response code used on a redirect endpoint<br>While REST endpoints can use HTTP codes to communicate the state of the response, redirect endpoints are limited to `30x` HTTP codes.<br>To address this problem, this property is used to contain the same HTTP code as the one that would be returned by a REST endpoint.
 */
export type ResponseCode = string;

/**
 * ** Please ignore **
 * Only needed to have an entry point for generating all interfaces together
 */
export interface _ {
  domain?: Domain;
  error?: Error;
  "get-3pc-request"?: Get3PcRequest;
  "get-3pc-response"?: Get3PcResponse;
  "get-identity-request"?: GetIdentityRequest;
  "get-identity-response"?: GetIdentityResponse;
  "get-ids-prefs-request"?: GetIdsPrefsRequest;
  "get-ids-prefs-response"?: GetIdsPrefsResponse;
  "get-new-id-request"?: GetNewIdRequest;
  "get-new-id-response"?: GetNewIdResponse;
  identifier?: Identifier;
  identifiers?: Identifiers;
  "ids-and-optional-preferences"?: IdsAndOptionalPreferences;
  "ids-and-preferences"?: IdsAndPreferences;
  "message-base"?: MessageBase;
  "post-ids-prefs-request"?: PostIdsPrefsRequest;
  "post-ids-prefs-response"?: PostIdsPrefsResponse;
  preferences?: Preferences;
  "redirect-get-ids-prefs-request"?: RedirectGetIdsPrefsRequest;
  "redirect-get-ids-prefs-response"?: RedirectGetIdsPrefsResponse;
  "redirect-post-ids-prefs-request"?: RedirectPostIdsPrefsRequest;
  "redirect-post-ids-prefs-response"?: RedirectPostIdsPrefsResponse;
  "response-code"?: ResponseCode;
  "return-url"?: ReturnUrl;
  signature?: Signature;
  source?: Source;
  timestamp?: Timestamp2;
  version?: Version;
}
/**
 * The description of an error
 */
export interface Error {
  /**
   * The error message
   */
  message: string;
}
/**
 * GET /v1/3pc response
 */
export interface Get3PcResponse {
  /**
   * Always return `true` to signify 3rd party cookies have been verified (are supported)
   * If 3rd party cookies are not supported, the endpoint returns `404` and an error message
   */
  "3pc": true;
}
/**
 * GET /v1/identity response
 */
export interface GetIdentityResponse {
  /**
   * The name of the contracting party, since the domain may not reflect the company name.
   *
   */
  name: string;
  /**
   * The type of contracting party in the PAF ecosystem
   */
  type: "vendor" | "operator";
  version: Version;
  /**
   * List of public keys the contracting party used or is using for signing data and messages
   */
  keys: {
    /**
     * Public key string value
     */
    key: string;
    start: Timestamp;
    end?: Timestamp1;
  }[];
}
/**
 * GET /v1/ids-prefs request
 */
export interface GetIdsPrefsRequest {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp2;
  signature: Signature;
}
/**
 * GET /v1/ids-prefs response
 */
export interface GetIdsPrefsResponse {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp2;
  signature: Signature;
  body: IdsAndOptionalPreferences;
}
/**
 * A list of identifiers and optionally, some preferences
 */
export interface IdsAndOptionalPreferences {
  preferences?: Preferences;
  identifiers: Identifier[];
}
/**
 * The current preferences of the user
 */
export interface Preferences {
  version: Version;
  data: {
    /**
     * `true` if the user accepted the usage of browsing history for ad personalization, `false` otherwise
     */
    use_browsing_for_personalization: boolean;
  };
  source: Source;
}
/**
 * Source of data representing what contracting party created and signed the data
 */
export interface Source {
  timestamp: Timestamp2;
  domain: Domain;
  signature: Signature;
}
/**
 * A pseudonymous identifier generated for a web user
 */
export interface Identifier {
  version: Version;
  /**
   * The identifier type, identifier of type `paf_browser_id` is mandatory and is "pivot"
   */
  type: "paf_browser_id";
  /**
   * If set to `false`, means the identifier has not yet been persisted as a cookie.<br>Otherwise, means this identifier is persisted as a PAF cookie<br>(default value = `true` meaning if the property is omitted the identifier *is* persisted)
   */
  persisted?: boolean;
  /**
   * The identifier value
   */
  value: string;
  source: Source;
}
/**
 * GET /v1/new-id request
 */
export interface GetNewIdRequest {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp2;
  signature: Signature;
}
/**
 * GET /v1/new-id response
 */
export interface GetNewIdResponse {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp2;
  signature: Signature;
  body: {
    identifiers: Identifier[];
  };
}
/**
 * A pseudonymous identifier generated for a web user
 */
export interface Identifier1 {
  version: Version;
  /**
   * The identifier type, identifier of type `paf_browser_id` is mandatory and is "pivot"
   */
  type: "paf_browser_id";
  /**
   * If set to `false`, means the identifier has not yet been persisted as a cookie.<br>Otherwise, means this identifier is persisted as a PAF cookie<br>(default value = `true` meaning if the property is omitted the identifier *is* persisted)
   */
  persisted?: boolean;
  /**
   * The identifier value
   */
  value: string;
  source: Source;
}
/**
 * A list of identifiers and some preferences
 */
export interface IdsAndPreferences {
  preferences: Preferences;
  identifiers: Identifier[];
}
/**
 * The base properties of a request or response to/from an operator
 */
export interface MessageBase {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp2;
  signature: Signature;
}
/**
 * POST /v1/ids-prefs request
 */
export interface PostIdsPrefsRequest {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp2;
  signature: Signature;
  body: IdsAndPreferences;
}
/**
 * GET /v1/redirect/get-ids-prefs request
 */
export interface RedirectGetIdsPrefsRequest {
  returnUrl: ReturnUrl;
  request: GetIdsPrefsRequest;
}
export interface RedirectGetIdsPrefsResponse {
  code: ResponseCode;
  response?: GetIdsPrefsResponse;
  error?: Error;
}
/**
 * GET /v1/redirect/post-ids-prefs request
 */
export interface RedirectPostIdsPrefsRequest {
  returnUrl: ReturnUrl;
  request: PostIdsPrefsRequest;
}
export interface RedirectPostIdsPrefsResponse {
  code: ResponseCode;
  response?: GetIdsPrefsResponse;
  error?: Error;
}
